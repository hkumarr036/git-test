Website :	
		https://computingforgeeks.com/how-to-install-grafana-on-ubuntu-linux-2/?expand_article=1

		https://computingforgeeks.com/install-prometheus-server-on-debian-ubuntu-linux/?expand_article=1
		
		https://computingforgeeks.com/monitor-linux-server-with-prometheus-grafana/
		
========================    Steps to configure Grafana and prometheus in ubuntu 22.04  =====================

Step 1: Update system
Ensure your Ubuntu system is up to date.

sudo apt update

Step 2: Add Grafana APT repository
Add Grafana gpg key which allows you to install signed packages.

sudo apt install -y gnupg2 curl software-properties-common
curl -fsSL https://packages.grafana.com/gpg.key|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/grafana.gpg

Then install Grafana APT repository:

sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
If your system is missing , check How to Install add-apt-repository on Debian / Ubuntu

Step 3: Install Grafana on Ubuntu
Once the repository is added, proceed to update your Apt repositories and install Grafana

sudo apt update
sudo apt -y install grafana
Start Grafana service.

sudo systemctl enable --now grafana-server
The service should now be running.

$ systemctl status grafana-server.service 
● grafana-server.service - Grafana instance
     Loaded: loaded (/lib/systemd/system/grafana-server.service; enabled; vendor preset: enabled)
     Active: active (running) since Fri 2022-10-14 16:26:13 EAT; 4s ago
       Docs: http://docs.grafana.org
   Main PID: 5541 (grafana-server)
      Tasks: 7 (limit: 9460)
     Memory: 41.7M
        CPU: 784ms
     CGroup: /system.slice/grafana-server.service
             └─5541 /usr/sbin/grafana-server --config=/etc/grafana/grafana.ini --pidfile=/run/grafana/grafana-server.pid --packaging=deb cfg:default.paths.logs=/var/log/grafana cfg:default.paths.da>

Oct 14 16:26:15 jammy grafana-server[5541]: logger=live.push_http t=2022-10-14T16:26:15.390848521+03:00 level=info msg="Live Push Gateway initialization"
Oct 14 16:26:15 jammy grafana-server[5541]: logger=infra.usagestats.collector t=2022-10-14T16:26:15.666309404+03:00 level=info msg="registering usage stat providers" usageStatsProvidersLen=2
Oct 14 16:26:15 jammy grafana-server[5541]: logger=server t=2022-10-14T16:26:15.669532612+03:00 level=info msg="Writing PID file" path=/run/grafana/grafana-server.pid pid=5541
Oct 14 16:26:15 jammy grafana-server[5541]: logger=provisioning.alerting t=2022-10-14T16:26:15.670221114+03:00 level=info msg="starting to provision alerting"
Oct 14 16:26:15 jammy grafana-server[5541]: logger=provisioning.alerting t=2022-10-14T16:26:15.670379505+03:00 level=info msg="finished to provision alerting"
Oct 14 16:26:15 jammy grafana-server[5541]: logger=http.server t=2022-10-14T16:26:15.683158306+03:00 level=info msg="HTTP Server Listen" address=[::]:3000 protocol=http subUrl= socket=
Oct 14 16:26:15 jammy grafana-server[5541]: logger=ngalert t=2022-10-14T16:26:15.683496864+03:00 level=info msg="warming cache for startup"
Oct 14 16:26:15 jammy grafana-server[5541]: logger=ticker t=2022-10-14T16:26:15.683796068+03:00 level=info msg=starting first_tick=2022-10-14T16:26:20+03:00
Oct 14 16:26:15 jammy grafana-server[5541]: logger=grafanaStorageLogger t=2022-10-14T16:26:15.692317758+03:00 level=info msg="storage starting"
Oct 14 16:26:15 jammy grafana-server[5541]: logger=ngalert.multiorg.alertmanager t=2022-10-14T16:26:15.692975064+03:00 level=info msg="starting MultiOrg Alertmanager"
Step 4: Open Port on Firewall (Optional)
Grafana default http port is 3000, you’ll need to allow access to this port on the firewall. Ubuntu comes with ufw firewall. For Debian, you can install it using:

sudo apt -y install ufw
Then enable the firewall service:

sudo ufw enable
Open the port on the firewall:

sudo ufw allow ssh
sudo ufw allow 3000/tcp
To allow access only from a specific subnet, use:

sudo ufw allow from 192.168.50.0/24 to any port 3000
Step 5: Access Grafana Dashboard
Access Grafana Dashboard using the server IP address or hostname and port 3000.

grafana login
Default logins are:

Username: admin
Password: admin
Change Admin Password
Remember to change admin password from default admin. Login and navigate to:

grafana change password

===============  Configure Prometheus =======================


Step 1: Create Prometheus system group
Let’s start by creating the Prometheus system user and group.

sudo groupadd --system prometheus
The group with ID < 1000 is a system group. Once the system group is added, create Prometheus system user and assign primary group created.

sudo useradd -s /sbin/nologin --system -g prometheus prometheus
Step 2: Create data & configs directories
Prometheus needs a directory to store its data. We will create this under /var/lib/prometheus.

sudo mkdir /var/lib/prometheus
Prometheus primary configuration files directory is /etc/prometheus/. It will have some sub-directories:

for i in rules rules.d files_sd; do sudo mkdir -p /etc/prometheus/${i}; done
Step 3: Download Prometheus files
We need to download the latest release of Prometheus archive and extract it to get binary files. You can check releases from Prometheus releases Github page.

Install wget.

sudo apt update
sudo apt -y install wget curl vim
Then download latest binary archive for Prometheus.

mkdir -p /tmp/prometheus && cd /tmp/prometheus
curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest | grep browser_download_url | grep linux-amd64 | cut -d '"' -f 4 | wget -qi -
Extract the file:

tar xvf prometheus*.tar.gz
cd prometheus*/
Move the binary files to /usr/local/bin/ directory.

sudo mv prometheus promtool /usr/local/bin/
Check installed version:

$ prometheus --version
prometheus, version 2.43.0 (branch: HEAD, revision: edfc3bcd025dd6fe296c167a14a216cab1e552ee)
  build user:       root@8a0ee342e522
  build date:       20230321-12:56:07
  go version:       go1.19.7
  platform:         linux/amd64
  tags:             netgo,builtinasset

$ promtool --version
promtool, version 2.43.0 (branch: HEAD, revision: edfc3bcd025dd6fe296c167a14a216cab1e552ee)
  build user:       root@8a0ee342e522
  build date:       20230321-12:56:07
  go version:       go1.19.7
  platform:         linux/amd64
  tags:             netgo,builtinassets
Move Prometheus configuration template to /etc directory.

sudo mv prometheus.yml /etc/prometheus/prometheus.yml
Also move consoles and console_libraries to /etc/prometheus directory:

sudo mv consoles/ console_libraries/ /etc/prometheus/
cd $HOME
Step 4: Configure Prometheus on Ubuntu
Create or edit a configuration file for Prometheus – /etc/prometheus/prometheus.yml.

sudo vim /etc/prometheus/prometheus.yml
The template configurations should look similar to below:

# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
    - targets: ['localhost:9090']
You can edit the file to your default liking and save it.

Create a Prometheus systemd Service unit file
To be able to manage Prometheus service with systemd, you need to explicitly define this unit file.

sudo tee /etc/systemd/system/prometheus.service<<EOF
[Unit]
Description=Prometheus
Documentation=https://prometheus.io/docs/introduction/overview/
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=prometheus
Group=prometheus
ExecReload=/bin/kill -HUP \$MAINPID
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/var/lib/prometheus \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:9090 \
  --web.external-url=

SyslogIdentifier=prometheus
Restart=always

[Install]
WantedBy=multi-user.target
EOF
Change directory permissions.
Change the ownership of these directories to Prometheus user and group.

for i in rules rules.d files_sd; do sudo chown -R prometheus:prometheus /etc/prometheus/${i}; done
for i in rules rules.d files_sd; do sudo chmod -R 775 /etc/prometheus/${i}; done
sudo chown -R prometheus:prometheus /var/lib/prometheus/
Reload systemd daemon and start the service:
sudo systemctl daemon-reload
sudo systemctl start prometheus
sudo systemctl enable prometheus
Check status using systemctl status prometheus command:

$ systemctl status prometheus
● prometheus.service - Prometheus
   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)
   Active: active (running) since Sun 2020-01-19 14:36:08 UTC; 14s ago
     Docs: https://prometheus.io/docs/introduction/overview/
 Main PID: 1397 (prometheus)
    Tasks: 7 (limit: 2377)
   Memory: 21.7M
   CGroup: /system.slice/prometheus.service
           └─1397 /usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus --web.console.templates

Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.959Z caller=main.go:334 vm_limits="(soft=unlimited, hard=unlimited)"
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.960Z caller=main.go:648 msg="Starting TSDB ..."
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.964Z caller=head.go:584 component=tsdb msg="replaying WAL, this may take awhil
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.964Z caller=web.go:506 component=web msg="Start listening for connections" add
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.965Z caller=head.go:632 component=tsdb msg="WAL segment loaded" segment=0 maxS
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.966Z caller=main.go:663 fs_type=EXT4_SUPER_MAGIC
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.966Z caller=main.go:664 msg="TSDB started"
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.966Z caller=main.go:734 msg="Loading configuration file" filename=/etc/prometh
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.967Z caller=main.go:762 msg="Completed loading of configuration file" filename
Jan 19 14:36:08 deb10 prometheus[1397]: level=info ts=2020-01-19T14:36:08.967Z caller=main.go:617 msg="Server is ready to receive web requests."
If your server has a running firewall service, you’ll need to open port 9090.

sudo ufw allow 9090/tcp
Confirm that you can connect to port 9090 by access the Prometheus server IP address / DNS name in your web browser.

prometheus ui


============= configure Node Exporter ======================


Setup Procedure:

Install Prometheus and Grafana
Install Prometheus Node Exporter on Linux servers to be monitored
Configure Node Exporter
Configure Prometheus server with Scrap jobs
Add Dashboards to Grafana
Start visualizing system metrics on Grafana
For installation of Prometheus and Grafana use:

Install Prometheus Server on CentOS 7 / Ubuntu / Debian
How to Install Grafana on Ubuntu and Debian
Install Grafana and InfluxDB on CentOS 7
Step 1: Add Prometheus system user
We’ll add a user account to run nod exporter service. It is safe since it doesn’t have access to the interactive shell and home directory.

sudo groupadd --system prometheus
sudo useradd -s /sbin/nologin --system -g prometheus prometheus
We added a system user called prometheus whose default group is prometheus.

Step 2: Install Prometheus Node Exporter
Install wget and curl

### RHEL based systems ###
sudo yum -y install wget curl vim

### Debian based systems ###
sudo apt update
sudo apt install curl wget vim -y
Next is the latest release of Prometheus Node exporter:

curl -s https://api.github.com/repos/prometheus/node_exporter/releases/latest | grep browser_download_url | grep linux-amd64 |  cut -d '"' -f 4 | wget -qi -
Extract the file downloaded:

tar xvf node_exporter-*linux-amd64.tar.gz
Move the downloaded file to the /usr/local/bin directory:

cd node_exporter*/
sudo mv node_exporter /usr/local/bin/
cd ~/
The version installed can be confirmed using the command:

$ node_exporter  --version
node_exporter, version 1.5.0 (branch: HEAD, revision: 1b48970ffcf5630534fb00bb0687d73c66d1c959)
  build user:       root@6e7732a7b81b
  build date:       20221129-18:59:09
  go version:       go1.19.3
  platform:         linux/amd64
Step 3: Configure Node Exporter systemd / Init script
Collectors are enabled by providing a --collector.<name> flag.

Collectors that are enabled by default can be disabled by providing a --no-collector.<name>flag.

sudo vim /etc/systemd/system/node_exporter.service
Add below content:

[Unit]
Description=Prometheus
Documentation=https://github.com/prometheus/node_exporter
Wants=network-online.target
After=network-online.target

[Install]
WantedBy=multi-user.target

[Service]
Type=simple
User=prometheus
Group=prometheus
ExecReload=/bin/kill -HUP $MAINPID
ExecStart=/usr/local/bin/node_exporter \
    --collector.cpu \
    --collector.diskstats \
    --collector.filesystem \
    --collector.loadavg \
    --collector.meminfo \
    --collector.filefd \
    --collector.netdev \
    --collector.stat \
    --collector.netstat \
    --collector.systemd \
    --collector.uname \
    --collector.vmstat \
    --collector.time \
    --collector.mdadm \
    --collector.zfs \
    --collector.tcpstat \
    --collector.bonding \
    --collector.hwmon \
    --collector.arp \
    --web.listen-address=:9100 \
    --web.telemetry-path="/metrics"
Start the service and enable it to start on boot:

sudo systemctl daemon-reload
sudo systemctl start node_exporter
sudo systemctl enable node_exporter
Step 4: Configure firewall
If you have an active firewall on your server, e.g firewalld, ufw, open port 9100

sudo ufw allow 9100
For CentOS 7 system, use firewalld:

sudo firewall-cmd --add-port=9100/tcp --permanent
sudo firewall-cmd --reload
For Init Linux system like CentOS 6, you can use daemonize to start the service in the background.

Install daemonize:

sudo yum install daemonize
sudo apt install daemonize
Once installed, create node_exporter init script:

sudo vim /etc/init.d/node_exporter
Add below script:

#!/bin/bash
# Author: Josphat Mutai, josphatkmutai@gmail.com , https://github.com/jmutai
# node_exporter     This shell script takes care of starting and stopping Prometheus apache exporter
#
# chkconfig: 2345 80 80
# description: Prometheus apache exporter  start script
# processname: node_exporter
# pidfile: /var/run/node_exporter.pid

# Source function library.
. /etc/rc.d/init.d/functions

RETVAL=0
PROGNAME=node_exporter
PROG=/usr/local/bin/${PROGNAME}
RUNAS=prometheus
LOCKFILE=/var/lock/subsys/${PROGNAME}
PIDFILE=/var/run/${PROGNAME}.pid
LOGFILE=/var/log/${PROGNAME}.log
DAEMON_SYSCONFIG=/etc/sysconfig/${PROGNAME}

# GO CPU core Limit

#GOMAXPROCS=$(grep -c ^processor /proc/cpuinfo)
GOMAXPROCS=1

# Source config

. ${DAEMON_SYSCONFIG}

start() {
    if [[ -f $PIDFILE ]] > /dev/null; then
        echo "node_exporter  is already running"
        exit 0
    fi

    echo -n "Starting node_exporter  service…"
    daemonize -u ${USER} -p ${PIDFILE} -l ${LOCKFILE} -a -e ${LOGFILE} -o ${LOGFILE} ${PROG} ${ARGS}
    RETVAL=$?
    echo ""
    return $RETVAL
}

stop() {
    if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
        echo "Service not running"
        return 1
    fi
    echo 'Stopping service…'
    #kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
    killproc -p ${PIDFILE} -d 10 ${PROG}
    RETVAL=$?
    echo
    [ $RETVAL = 0 ] && rm -f ${LOCKFILE} ${PIDFILE}
    return $RETVAL
}

status() {
    if [ -f "$PIDFILE" ] || kill -0 $(cat "$PIDFILE"); then
      echo "apache exporter  service running..."
      echo "Service PID: `cat $PIDFILE`"
    else
      echo "Service not running"
    fi
     RETVAL=$?
     return $RETVAL
}

# Call function
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 2
esac
Create Arguments configuration file:

sudo vim /etc/sysconfig/node_exporter
Add:

"--collector.cpu \
--collector.diskstats \
--collector.filesystem \
--collector.loadavg \
--collector.meminfo \
--collector.filefd \
--collector.netdev \
--collector.stat \
--collector.netstat \
--collector.systemd \
--collector.uname \
--collector.vmstat \
--collector.time \
--collector.mdadm \
--collector.xfs \
--collector.zfs \
--collector.tcpstat \
--collector.bonding \
--collector.hwmon \
--collector.arp \
--web.listen-address=:9100
Test the script:

# /etc/init.d/node_exporter
Usage: /etc/init.d/node_exporter {start|stop|restart}
Step 5: Start the Prometheus node exporter service
For systemd, start using:

sudo systemctl start node_exporter
sudo systemctl enable node_exporter
For Init system use:

sudo /etc/init.d/node_exporter start
sudo chkconfig node_exporter on
You can verify using:

$ sudo /etc/init.d/node_exporter status
apache exporter  service running...
Service PID: 1970

$ sudo chkconfig --list | grep node_exporter
node_exporter 0:off   1:off   2:on    3:on    4:on    5:on    6:off

$ sudo ss -tunelp | grep 9100
tcp    LISTEN     0      128      :::9100                 :::*                   users:(("node_exporter",pid=16105,fd=3)) uid:997 ino:193468 sk:ffff8a0a76f52a80 v6only:0 <->
Step 6: Add exporter job to Prometheus
The second last step is to add a job to the Prometheus server for scraping metrics. Edit /etc/prometheus/prometheus.yml

$ sudo vim /etc/prometheus/prometheus.yml
# Linux Servers
  - job_name: apache-linux-server1
    static_configs:
      - targets: ['10.1.10.20:9100']
        labels:
          alias: server1

  - job_name: apache-linux-server2
    static_configs:
      - targets: ['10.1.10.21:9100']
        labels:
          alias: server2
Restart prometheus service for scraping to start

sudo systemctl restart prometheus
Test access to port 9100 from Prometheus server

$ telnet 10.1.10.20 9100
Trying 10.1.10.20...
Connected to 10.1.10.20.
Escape character is '^]'.
^]
Step 7: Add Dashboard to Grafana
You can create your own Grafana dashboard or import from a collection of community shared dashboards. Below is a list of dashboards than has been created to show classical system metrics of your *NIX server.

Recommended:

https://grafana.com/grafana/dashboards/1860-node-exporter-full/
https://grafana.com/grafana/dashboards/8919
https://github.com/percona/grafana-dashboards
https://github.com/rfrail3/grafana-dashboards
For demo purposes, we’ll use the first dashboard with ID 1860.

Add Prometheus data source

With Prometheus data source added to Grafana, Import Apache Grafana Dashboard by navigating to Dashboard > Import. Use 1860 for Grafana Dashboard ID.

prometheus node exporter import dashboard min
Give it a descriptive name and select Prometheus data source added earlier.

prometheus node exporter import dashboard 02 min
Click “Import” button to start using the dashboard. After a few minutes, the metrics should start showing.

node exporter system dashboard min
That’s all. Feel free to customize the dashboard to fit your use case and share for others to benefit as well.

Monitoring MySQL / MariaDB with Prometheus in five minutes

How To Monitor Etcd Cluster with Prometheus and Grafana




===================  Add Dashboard to Grafana ==========================

https://prometheus.io/docs/visualization/grafana/

Creating a Prometheus data source
To create a Prometheus data source in Grafana:

Click on the "cogwheel" in the sidebar to open the Configuration menu.
Click on "Data Sources".
Click on "Add data source".
Select "Prometheus" as the type.
Set the appropriate Prometheus server URL (for example, http://localhost:9090/)
Adjust other data source settings as desired (for example, choosing the right Access method).
Click "Save & Test" to save the new data source.


https://grafana.com/grafana/dashboards/1860-node-exporter-full/

1860

================== grofana loki setup ===========================


https://levelup.gitconnected.com/how-to-setup-grafana-loki-for-free-log-management-ceb60558503c


https://www.devopstricks.in/installing-grafana-loki-on-ubuntu-22-04-lts/


Step 1: Run System Updates
You need to update the ubuntu current repository by following the given command.

sudo apt-get update 
Step 2: Download Loki
We need to download the Grafana Loki binaries for ubuntu, To get latest version you need to click here and get copy the latest link and change with given command in order to download the package.

wget https://github.com/grafana/loki/releases/download/v2.7.1/loki-linux-amd64.zip
To unzip the zip file.

unzip loki-linux-amd64.zip
to move in system binary location.

sudo mv loki-linux-amd64 /usr/local/bin/loki
to create directory for data and configuration file.

sudo mkdir /etc/loki && sudo mkdir -p /data/loki
Step 3: Create Loki Config file
We are ready to create a config file to configure listen port, check setting, schema config prefix and other required setting, Execute the given command one by one.

To create a main config file with named loki-local-config.yaml

sudo vim /etc/loki-local-config.yaml
Paste the following standard configuration.

auth_enabled: false

server:
  http_listen_port: 3100

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
    final_sleep: 0s
  chunk_idle_period: 5m
  chunk_retain_period: 30s
  max_transfer_retries: 0

schema_config:
  configs:
    - from: 2018-04-15
      store: boltdb
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 168h

storage_config:
  boltdb:
    directory: /data/loki/index

  filesystem:
    directory: /data/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0s

table_manager:
  retention_deletes_enabled: false
  retention_period: 0s
Save and exit from the vim text editor.

Step 4: Creating SystemD Service
The SystemD service is critical to create because it will handle the Grafana-Loki process, which we can easily start, stop, restart, enable, and disable during server boot, Use the given command for the same.

To create a systemD config file with named loki.service

sudo vim /etc/systemd/system/loki.service
Paste the following configuration.

[Unit]
Description=Loki service
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/loki -config.file /etc/loki-local-config.yaml

[Install]
WantedBy=multi-user.target
Save and exit from the text editor and now we are good to reload the daemon.

sudo systemctl daemon-reload
To start the Grafana;s Loki service.

sudo systemctl start loki.service
To check loki service status.

sudo systemctl status loki.service
It should show in running state with 3100 port number.

You loki server endpoint would be like http://localhost:3100 or http://IP_ADDRESS:3100, You should open the port 3100 in your OS level firewall and network level firewall.

Note: We have only installed Grafana Loki, which collects the logs from the target machine, but we need a Promtail agent in every machine to get logs from the client machine to the Grafana Loki server.

Step 5: Installing Promtail Agent
Pomtail is an agent that is typically installed on every machine that hosts applications that require logs monitoring. It transmits the contents of local logs to Grafana Loki server or the Grafana cloud.

To download Promtail package, You can download the latest version of Promtail by clicking here and update in given command.

curl -LO https://github.com/grafana/loki/releases/download/v2.4.2/promtail-linux-amd64.zip
To unzip Promtail’s zip file.

unzip promtail-linux-amd64.zip
To move the promtail’s file in system’s binary location.

sudo mv promtail-linux-amd64 /usr/local/bin/promtail
To create promtail main configuration file.

sudo vim /etc/promtail-local-config.yaml
Paste the following configuration.

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /data/loki/positions.yaml

clients:
  - url: http://localhost:3100/loki/api/v1/push

scrape_configs:
- job_name: system
  static_configs:
  - targets:
      - localhost
    labels:
      job: varlogs
      __path__: /var/log/*log
Note: In the above promtail configuration we are only adding /var/log directory to ship to loki server.

The above configuration contains the log path, a Grafana endpoint with a port number, and more. You can add more jobs here to monitor your application. We need to update the log path.

To create a SystemD service for promtail.

sudo vim /etc/systemd/system/promtail.service
Paste the following configuration.

[Unit]
Description=Promtail service
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/promtail -config.file /etc/promtail-local-config.yaml

[Install]
WantedBy=multi-user.target
Save and exit from the text editor and we are good to reload the daemon.

To reload the daemon.

sudo systemctl daemon-reload
To start the promtail serivce.

sudo systemctl start promtail.service
To check promtail service status.

sudo systemctl status promtail.service
You should get Promtail service up and running in your screen.

We are good to configure Loki endpoint in our grafana server to receive the logs from promtail agent.

Step 6: Configure Loki with Grafana
We need to add the Loki data source in our Grafana server by using our Loki endpoint, and after that, we will be able to see the logs in our Grafana Loki Query section, and later on, we can create log metrics with alerting.

Login in your Grafana account.

Add the Loki data source.

Enter the Loki server access point and port number.

Test the Loki data source.

Test logs in your Grafana’s Loki query box.

Conclusion
We have successfully installed Grafana-loki with promtail agent on ubuntu 22.04 LTS server, If you still have questions, please post them in the comments section below.


